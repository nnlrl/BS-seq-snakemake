import os

# this container defines the underlying OS for each job when using the workflow
# with --use-conda --use-singularity
container: "docker://continuumio/miniconda3"

# include function definitions and extra rules
include: "rules/common.smk"
validate_config(config)

#--- DEFINE OUTPUT DIRECTORIES TO BE PRODUCED
OUTDIR = config['locations']['output-dir']     #--- current work dir (important for rmarkdown)

DIR_scripts   = os.path.join(config["locations"]["workdir"], "workflow/scripts")
DIR_templates = os.path.join(config["locations"]["workdir"], "workflow/report_templates")

DIR_diffmeth    =  os.path.join(OUTDIR, '09_differential_methylation/' )
DIR_seg         =  os.path.join(OUTDIR, '08_segmentation/' )
DIR_bigwig      =  os.path.join(OUTDIR, '07_bigwig_files/')
DIR_methcall    =  os.path.join(OUTDIR, '06_methyl_calls/' )
DIR_sorted      =  os.path.join(OUTDIR, '05_sorting_deduplication/' )
DIR_mapped      =  os.path.join(OUTDIR, '04_mapping/' )
DIR_posttrim_QC =  os.path.join(OUTDIR, '03_posttrimming_QC/' )
DIR_trimmed     =  os.path.join(OUTDIR, '02_trimming/' )
DIR_rawqc       =  os.path.join(OUTDIR, '01_raw_QC/' )

DIR_final       = os.path.join(OUTDIR, "Reports/")


#--- DEFINE PATHS AND FILE NAMES:


BIBTEXPATH = "report_templates/reports.bib"

PATHIN     = os.path.join(OUTDIR, "work/input/")           # location of the data files to be imported (script creates symbolic link)
GENOMEFILE = config['locations']['genome-fasta']    # where the reference genome being mapped to is stored
GENOMEPATH = os.path.dirname(GENOMEFILE) + "/"
ASSEMBLY   = config['general']['assembly'] # version of the genome being mapped to

# FIXME: lookup and fetch now done in diffmethreport, but should they get their own rule ??
## should we do fetching at all? would be maybe more stable if we require people to download themselves.
WEBFETCH = TrueOrFalse(config['general']['differential-methylation']['annotation']['webfetch'])
CPGISLAND_BEDFILE = config['general']['differential-methylation']['annotation']['cpgIsland-bedfile']
REFGENES_BEDFILE  = config['general']['differential-methylation']['annotation']['refGenes-bedfile']

if CPGISLAND_BEDFILE and os.path.isfile(CPGISLAND_BEDFILE):
  # make path absolute
  CPGISLAND_BEDFILE = os.path.abspath(CPGISLAND_BEDFILE)

elif WEBFETCH:
    CPGISLAND_BEDFILE = os.path.join(OUTDIR, 'work','refGenome',"cpgIslandExt."+ASSEMBLY+".bed.gz")
    print("WARNING: Parameter 'general::differential-methylation::annotation::cpgIsland-bedfile' was not set to a valid file.\n",
    "Updating to "+CPGISLAND_BEDFILE+" since webfetch was set.\n")


if REFGENES_BEDFILE and os.path.isfile(REFGENES_BEDFILE):
  # make path absolute
  REFGENES_BEDFILE = os.path.abspath(REFGENES_BEDFILE)

elif WEBFETCH:
  REFGENES_BEDFILE = os.path.join(OUTDIR, 'work','refGenome',"knownGene."+ASSEMBLY+".bed.gz")
  print("WARNING: Parameter 'general::differential-methylation::annotation::refGenes-bedfile' was not set to a valid file.\n",
  "Updating to "+REFGENES_BEDFILE+" since webfetch was set.\n")



#--- CHOOSE PIPELINE BRANCH
USEBWAMETH = TrueOrFalse(config['general']['use_bwameth'])
USEBISMARK = TrueOrFalse(config['general']['use_bismark'])


#--- LIST THE OUTPUT FILES TO BE PRODUCED:

# Below is a mapping of rule names to the expected output files they
# produce.  The desired output files are specified in
# "OUTPUT_FILES".  A different set of output files can be
# selected to run fewer rules.


targets = {
    # rule to print all rule descriptions
    'help': {
        'description': "Print all rules and their descriptions.",
        'files': []
    },

    # This is an expensive one-time rule to prepare the genome.
    'genome-prep': {
        'description': "Convert reference genome into Bisulfite analogue.",
        'files': [
            GENOMEPATH+"Bisulfite_Genome/CT_conversion/genome_mfa.CT_conversion.fa",
            GENOMEPATH+"Bisulfite_Genome/GA_conversion/genome_mfa.GA_conversion.fa"
        ]
    },

    'raw-qc': {
        'description': "Perform raw quality control.",
        'files': files_for_sample(list_files_rawQC)
    },

    # This rule is always executed, as trimming is a prerequisite for
    # subsequent rules
    'trimming': {
        'description': "Trim the reads.",
        'files': files_for_sample(list_files_TG)
    },

    # fastQC output files are not needed downstream and need to be
    # called explicitly.
    'posttrim-qc': {
        'description': "Perform quality control after trimming.",
        'files': files_for_sample(list_files_posttrim_QC)
    },

    'mapping': {
        'description': "Align and map reads with Bismark.",
        'files': files_for_sample(list_files_bismark)
    },

    'mapping-bwameth': {
        'description': "Align and map reads with BWA-Meth.",
        'files': files_for_sample(list_files_bwameth)
    },


    'deduplication': {
        'description': "Deduplicate Bismark bam files.",
        'files': files_for_sample(list_files_dedupe)
    },

    'markduplicates': {
        'description': "Mark duplicates and sort BWA-Meth bam files.",
        'files': files_for_sample(list_files_markdup)
    },

    'bwameth-mapping-stats': {
        'description': "Get stats on BWA-Meth bam files.",
        'files': files_for_sample(list_files_bwamethMappingStats)
    },

    'methyl-extraction': {
        'description': "Process bwameth bam files using methylDackel.",
        'files': files_for_sample(list_files_methyldackel_extract)
    },

     # TODO: had to add this part to call bam_methCall for diff meth rule
    'methyl-calling': {
        'description': "Process Bismark bam files.",
        'files': files_for_sample(bam_processing)
    },

    'maketabix-methyldackel': {
        'description': "Generate Tabix files from methylDackel files.",
        'files': files_for_sample(list_files_maketabix_methyldackel)
    },

    'bigwig-bwameth': {
        'description': "export bigwig files from tabix files for visualization",
        'files': files_for_sample(bigwig_exporting_bwameth)
    },

    'bigwig': {
        'description': "export bigwig files to separate folder for visualization",
        'files': files_for_sample(bigwig_exporting_bismark)
    },

    'segmentation': {
        'description': "Segmentation of the methylation signal.",
        'files': files_for_sample(methSeg_bismark)
    },

    'segmentation-bwameth': {
        'description': "Segmentation of the methylation signal.",
        'files': files_for_sample(methSeg_bwameth)
    },

    'unite-bwameth': {
        'description': "Unite samples for differential methylation calling.",
        'files': files_for_treatment(list_files_unite_bwameth)
    },

    'unite': {
        'description': "Unite samples for differential methylation calling.",
        'files': files_for_treatment(list_files_unite_bismark)
    },

    'diffmeth-bwameth': {
        'description': "Perform differential methylation calling.",
        'files': files_for_treatment(list_files_diffmeth_bwameth)
    },

    'diffmeth': {
        'description': "Perform differential methylation calling.",
        'files': files_for_treatment(list_files_diffmeth_bismark)
    },

    'diffmeth-report-bwameth': {
        'description': "Produce a comprehensive report for differential methylation.",
        'files': files_for_treatment(list_files_diffmeth_report_bwameth)
    },

    'diffmeth-report': {
        'description': "Produce a comprehensive report for differential methylation.",
        'files': files_for_treatment(list_files_diffmeth_report_bismark)
    },

    'final-report-bwameth': {
        'description': "Produce a comprehensive report per Sample.",
        'files': files_for_sample(list_final_reports_bwameth)
    },
    'final-report': {
        'description': "Produce a comprehensive report per Sample.",
        'files': files_for_sample(list_final_reports_bismark)
    },
    'multiqc': {
        'description': "Produce a summarized qc report for bismark branch.",
        'files': [[os.path.join(DIR_final,"multiqc","bismark_multiqc_report.html")]]
    },
    'multiqc-bwameth': {
        'description': "Produce a comprehensive report for bwameth branch.",
        'files': [[os.path.join(DIR_final,"multiqc","bwameth_multiqc_report.html")]]
    }

}




# FIXME: add all relevant bwameth realted rules here
# if USEBWAMETH:
#     d_targets.append('bwameth-mapping-stats')

selected_targets_default = []
do_DManalyses = "DManalyses" in config.keys()

if USEBISMARK:
    # Should we perform differential analysis?
    if do_DManalyses:
        selected_targets_default += ['final-report', 'diffmeth-report', 'bigwig', 'multiqc']
    #   selected_targets_default += ['bigwig']
    else:
        selected_targets_default += ['final-report', 'bigwig', 'multiqc']

if USEBWAMETH:
    # Should we perform differential analysis?
    if do_DManalyses:
        selected_targets_default += ['final-report-bwameth', 'diffmeth-report-bwameth', 'bigwig-bwameth', 'multiqc-bwameth']
    else:
        selected_targets_default += ['final-report-bwameth', 'bigwig-bwameth','multiqc-bwameth']

# Selected output files from the above set.
selected_targets = config['execution']['target'] or selected_targets_default

# Check for availability of requested target
for target in selected_targets:
    if not target in targets.keys():
        target_desc = []
        for key in targets.keys():
            target_desc += ['{}:\t  {}'.format(key.ljust(25, ' '), targets[key]['description'])]

        bail("\n".join(["ERROR: Selected target '{}' is unknown.".format(target),
            "Please choose from available targets:",
            "\n"]+target_desc))

# FIXME: the list of files must be flattened twice(!).  We should make
# sure that the targets really just return simple lists.
from itertools import chain

OUTPUT_FILES = list(chain.from_iterable(chain.from_iterable([targets[name]['files'] for name in selected_targets])))
# print(OUTPUT_FILES)

# ==============================================================================================================
#
#                                         BEGIN RULES
#
# rules are separated by "==" bars into pairs for paired-end and single-end (subdivided by smaller "--" dividers)
# rules are (generally) presented in hierarchical order of dependency (i.e. last to first)
# ===============================================================================================================


rule all:
    input:
        OUTPUT_FILES

rule help:
    run:
        for key in sorted(targets.keys()):
            print('{}:\n  {}'.format(key, targets[key]['description']))

# Record any existing output files, so that we can detect if they have
# changed.
expected_files = {}
onstart:
    if OUTPUT_FILES:
        for name in OUTPUT_FILES:
            if os.path.exists(name):
                expected_files[name] = os.path.getmtime(name)

# Print generated target files.
onsuccess:
    if OUTPUT_FILES:
        # check if any existing files have been modified
        generated = []
        for name in OUTPUT_FILES:
            if name not in expected_files or os.path.getmtime(name) != expected_files[name]:
                generated.append(name)
        if generated:
            print("The following files have been generated:")
            for name in generated:
                print("  - {}".format(name))


include: "rules/qc.smk"
include: "rules/trim.smk"
include: "rules/bismark.smk"
include: "rules/bwameth.smk"
include: "rules/bigwig.smk"
include: "rules/methyldackel.smk"
include: "rules/methylkit.smk"
include: "rules/stats.smk"
include: "rules/diffmeth.smk"
include: "rules/report.smk"
